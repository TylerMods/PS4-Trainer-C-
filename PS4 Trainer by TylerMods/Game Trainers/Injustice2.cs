using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using librpc;

namespace PS4_Trainer_by_TylerMods.Game_Trainers
{
    public partial class Injustice2 : UserControl
    {
        PS4RPC PS4 = main.PS4;
        int processID = 0;
        ulong processEntry = 0x00;
        List<ulong> entryList = new List<ulong>();
        bool attached = false;

        ulong stub = 0;
        ulong stringbuf;

        public Injustice2()
        {
            InitializeComponent();
        }

        private void btnAttach_Click(object sender, EventArgs e)
        {
            var cusa = Util.GameInfoArray()[0]; var version = Util.GameInfoArray()[1];

            if (Util.GameInfoArray()[0] == "CUSA11228" || Util.GameInfoArray()[1] == "1.00")
            {

            }
            else
            {
                MessageBox.Show("Your version =" + $"{version}" + "\nYour CUSA =" + $"{cusa}");
            }

            Util.attachToGame("eboot.bin", "Injustice 2", ref attached, ref processID, ref processEntry, ref entryList, ref stub, ref stringbuf);

        }

        private void tglMax_CheckedChanged(object sender)
        {
            if (attached)
            {
                if (tglMax.Checked)
                {
                    PS4.WriteMemory(processID, processEntry + 0x47DBA0, new byte[] { 0xbe, 0xff, 0xc9, 0x9a, 0x3b, 0x89, 0x77, 0x24 });
                }
                else
                {
                    PS4.WriteMemory(processID, processEntry + 0x47DBA0, new byte[] { 0x01, 0x77, 0x24, 0x90, 0x90, 0x90, 0x90, 0x90 });
                }
            }

        }

        private void tglHealth_CheckedChanged(object sender)
        {
            if (attached)
            {
                if (tglHealth.Checked == true)
                {
                    PS4.WriteMemory(processID, 0xaa0d9e, new byte[] { 0xe9, 0xfd, 0xf6, 0x7a, 0x03, 0x90, 0x90, 0x90 });
                    PS4.WriteMemory(processID, 0x42504a0, new byte[] { 0x80, 0x7B, 0x16, 0x00, 0x0F, 0x84, 0xFC, 0x08, 0x85, 0xFC, 0xC5, 0xFA, 0x11, 0x83, 0x44, 0x0A, 0x00, 0x00, 0xE9, 0xEC, 0x08, 0x85, 0xFC });
                }
                else
                {
                    //MessageBox.Show("Currently unable to turn this feature off.");
                    PS4.WriteMemory(processID, 0xaa0d9e, new byte[] { 0xc5, 0xfa, 0x11, 0x83, 0x44, 0x0a, 0x00, 0x00 });
                    PS4.WriteMemory(processID, 0x42504a0, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                }

            }

        }

        private void tglMeter_CheckedChanged(object sender)
        {
            if (attached)
            {
                if (tglMeter.Checked == true)
                {
                    PS4.WriteMemory(processID, 0xbcad25, new byte[] { 0xe9, 0xf6, 0x9b, 0x84, 0x02, 0x90, 0x90, 0x90 });
                    PS4.WriteMemory(processID, 0x3414920, new byte[] { 0x80, 0x7B, 0x08, 0x00, 0x74, 0x0F, 0xC5, 0xFA, 0x11, 0x83, 0x34, 0x03, 0x00, 0x00, 0xE9, 0xF7, 0x63, 0x7B, 0xFD, 0x00, 0x00, 0x49, 0xC7, 0xC1, 0x01, 0x00, 0x00, 0x00, 0xF3, 0x4D, 0x0F, 0x2A, 0xC9, 0xC5, 0x7A, 0x11, 0x8B, 0x34, 0x03, 0x00, 0x00, 0xE9, 0xDF, 0x63, 0x7B, 0xFD });
                }
                else
                {
                    //MessageBox.Show("Currently unable to turn this feature off.");
                    PS4.WriteMemory(processID, 0xbcad25, new byte[] { 0xc5, 0xfa, 0x11, 0x83, 0x34, 0x03, 0x00, 0x00 });
                    PS4.WriteMemory(processID, 0x3414920, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                }

            }

        }

        private void tgl1HitKill_CheckedChanged(object sender)
        {
            if (attached)
            {
                if (tgl1HitKill.Checked == true)
                {
                    PS4.WriteMemory(processID, 0xaa0da6, new byte[] { 0xe9, 0x85, 0xbf, 0x70, 0x02, 0x90, 0x90, 0x90, 0x90, 0x90 });
                    PS4.WriteMemory(processID, 0x31acd30, new byte[] { 0xC5, 0xF8, 0x2E, 0xC1, 0x80, 0x7B, 0x16, 0x00, 0x0F, 0x84, 0x6D, 0x40, 0x8F, 0xFD, 0xC7, 0x83, 0x44, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x5E, 0x40, 0x8F, 0xFD });
                }
                else
                {
                    //MessageBox.Show("Currently unable to turn this feature off.");
                    PS4.WriteMemory(processID, 0xaa0da6, new byte[] { 0xc5, 0xf8, 0x2e, 0xc1, 0x0f, 0x86, 0x13, 0x01, 0x00, 0x00 });
                    PS4.WriteMemory(processID, 0x31acd30, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                }

            }

        }
    }
}
